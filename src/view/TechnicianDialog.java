package view;

import controllers.AppController;
import controllers.TaskTypeController;
import controllers.TechnicianController;
import model.TaskType;
import model.Technician;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

public class TechnicianDialog extends JDialog {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        saveBtn = new JButton();
        saveBtn.setEnabled(false);
        saveBtn.setText("Salvar");
        panel2.add(saveBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelBtn = new JButton();
        cancelBtn.setText("Cancel");
        panel2.add(cancelBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Nome");
        panel3.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameTextField = new JTextField();
        panel3.add(nameTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Email");
        panel3.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailTextField = new JTextField();
        panel3.add(emailTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Telefone");
        panel3.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        phoneTextField = new JTextField();
        panel3.add(phoneTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout(0, 0));
        panel3.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel4.add(scrollPane1, BorderLayout.CENTER);
        taskTypesList = new CheckBoxList();
        taskTypesList.setPreferredSize(new Dimension(0, 0));
        scrollPane1.setViewportView(taskTypesList);
        addRemovePanel = new JPanel();
        addRemovePanel.setLayout(new GridBagLayout());
        addRemovePanel.setPreferredSize(new Dimension(30, 82));
        panel4.add(addRemovePanel, BorderLayout.EAST);
        removeTaskTypeBtn = new JButton();
        removeTaskTypeBtn.setPreferredSize(new Dimension(20, 20));
        removeTaskTypeBtn.setText("-");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.SOUTH;
        addRemovePanel.add(removeTaskTypeBtn, gbc);
        addTaskTypeBtn = new JButton();
        addTaskTypeBtn.setPreferredSize(new Dimension(20, 20));
        addTaskTypeBtn.setText("+");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.NORTH;
        addRemovePanel.add(addTaskTypeBtn, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.VERTICAL;
        addRemovePanel.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.VERTICAL;
        addRemovePanel.add(spacer3, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Habilitação");
        panel3.add(label4, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public enum DialogMode {
        READ_ONLY,
        READ_WRITE
    }

    private TechnicianDialog(Technician technician, DialogMode mode) {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(saveBtn);
        setTitle("Detalhes do técnico");
        setSize(365, 300);
        setMinimumSize(new Dimension(365, 300));
        setPreferredSize(new Dimension(365, 300));
        setLocationRelativeTo(null);

        this.technician = technician;
        taskTypesListModel = new DefaultListModel<>();

        if (technician != null) {
            nameTextField.setText(technician.getName());
            emailTextField.setText(technician.getEmail());
            phoneTextField.setText(technician.getPhone());
            for (TaskType taskType : TechnicianController.getTaskTypesForTechnician(technician)) {
                taskTypesListModel.addElement(new TaskTypeCheckBox(taskType, true));
            }
            for (TaskType taskType : TechnicianController.getTaskTypesMinusTechnician(technician)) {
                taskTypesListModel.addElement(new TaskTypeCheckBox(taskType, false));
            }
        } else {
            for (TaskType taskType : TaskTypeController.getAllTaskTypes()) {
                taskTypesListModel.addElement(new TaskTypeCheckBox(taskType, false));
            }
        }

        taskTypesList.setModel(taskTypesListModel);

        if (mode == DialogMode.READ_ONLY) {
            nameTextField.setEnabled(false);
            emailTextField.setEnabled(false);
            phoneTextField.setEnabled(false);
            taskTypesList.setEnabled(false);
        }

        cancelBtn.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        if (mode == DialogMode.READ_WRITE) {
            final DocumentListener editListener = new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    enableSaveButton();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    enableSaveButton();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    enableSaveButton();
                }

                private void enableSaveButton() {
                    saveBtn.setEnabled(true);
                }
            };
            nameTextField.getDocument().addDocumentListener(editListener);
            emailTextField.getDocument().addDocumentListener(editListener);
            phoneTextField.getDocument().addDocumentListener(editListener);
            taskTypesList.addListSelectionListener(e -> saveBtn.setEnabled(true));
        }

        saveBtn.addActionListener(e -> {
            ArrayList<TaskType> taskTypes = new ArrayList<>();
            for (int i = 0; i < taskTypesListModel.size(); ++i) {
                if (taskTypesListModel.get(i).isSelected()) {
                    taskTypes.add(taskTypesListModel.get(i).getTaskType());
                }
            }
            if (this.technician == null) {
                Technician newTechnician = new Technician(nameTextField.getText(), emailTextField.getText(), phoneTextField.getText());
                TechnicianController.saveNewTechnician(newTechnician);
                TechnicianController.updateTaskTypesForTechnician(newTechnician, taskTypes);
            } else {
                this.technician.setName(nameTextField.getText());
                this.technician.setEmail(emailTextField.getText());
                this.technician.setPhone(phoneTextField.getText());
                TechnicianController.updateTechnician(this.technician);
                TechnicianController.updateTaskTypesForTechnician(this.technician, taskTypes);
            }
            dispose();
        });

        this.editListAction = new EditListAction(() -> {
            TaskTypeController.addTaskType(this.taskTypesList.getSelectedValue().getTaskType());
        });

        addTaskTypeBtn.addActionListener(e -> {
            TaskTypeCheckBox newTaskType = new TaskTypeCheckBox(new TaskType(""), true);
            this.taskTypesListModel.addElement(newTaskType);
            this.taskTypesList.setSelectedValue(newTaskType, true);
            this.editListAction.actionPerformed(this.taskTypesList);
        });

        removeTaskTypeBtn.addActionListener(e -> {
            if (this.taskTypesList.isSelectionEmpty()) {
                return;
            }
            TaskTypeCheckBox checkBox = this.taskTypesList.getSelectedValue();
            TaskType taskType = checkBox.getTaskType();
            int confirm = JOptionPane.showConfirmDialog(null,
                    "Tem certeza que deseja remover a habilitação '" + taskType.getName() + "'?\n" +
                            "Isso irá remover essa habilitação de todos os técnicos que a possuam.", "Confirmar remoção",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (confirm == JOptionPane.YES_OPTION) {
                TaskTypeController.removeTaskType(taskType);
                this.taskTypesListModel.removeElement(checkBox);
            }
        });
    }

    private void onCancel() {
        dispose();
    }

    public static void create(Technician technician, DialogMode mode) {
        TechnicianDialog dialog = new TechnicianDialog(technician, mode);
        dialog.pack();
        dialog.setLocationRelativeTo(AppController.getAppFrame());
        dialog.setVisible(true);
    }

    private Technician technician;

    private EditListAction editListAction;
    private DefaultListModel<TaskTypeCheckBox> taskTypesListModel;

    private JPanel contentPane;
    private JButton saveBtn;
    private JButton cancelBtn;
    private JTextField nameTextField;
    private JTextField emailTextField;
    private JTextField phoneTextField;
    private CheckBoxList<TaskTypeCheckBox> taskTypesList;
    private JButton addTaskTypeBtn;
    private JButton removeTaskTypeBtn;
    private JPanel addRemovePanel;
}
